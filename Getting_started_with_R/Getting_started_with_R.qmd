---
title: "Loading and visualizing data in R"
author: "Manny Gimond"
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning=FALSE, results="hide", tidy=FALSE )
```

------------------------------------------------------------------------

[Data for this tutorial can be downloaded [from here](./data.zip). Don't forget to unzip the files to a dedicated folder on your computer.]{.block1}


------------------------------------------------------------------------

R is a data analysis environment. RStudio is a desktop interface to R (sometimes referred to as an integrated development environment-or IDE for short). Unlike most desktop environments you have been exposed to so far, R does not take instructions from a point-and-click environment, its instructions are provided by simple lines of text.

# Setting up the R environment

## Installing packages

This course will make use of five packages: `sf` which is used to load and visualize vector files; `terra` which is used to load and visualize raster files; `spatstat` which will be used for point pattern analysis;  `spdep` which will be used to analyze spatial autocorrelation in the data.

You can install packages in one of two ways: via command line or via the RStudio interface.

### Option 1: Command line

```{r eval=FALSE}
install.packages("sf")
install.packages("spatstat")
install.packages("terra")
install.packages("spdep")
```

### Option 2: RStudio interface

![](img/image1.jpg)
 
 
> If you are given the option to either have R compile some of the libraries or to accept the binaries, opt for the compilation option. This may slow down the package installation process somewhat.

## Opening a new R script

If an empty R script file is not opened in RStudio open a new one now.

![](img/image2.jpg){width="242"}

R scripts are usually saved using the .R extension (e.g. *r_intro.R*). Make sure to save this script on a regular basis as you add/modify pieces of code.

## Setting an R session's workspace

If you plan to read or write files from/to a directory, you might find it beneficial to explicitly define the R session's project folder. To set a session's working directory, go to **Session \>\> Set Working Directory \>\> Choose Directory**. In this example, you will want to set the working directory to the folder that houses the sample dataset.

![](img/image3.jpg){width="409"}

## Loading (activating) packages

Installing packages under your user profile is a one-time process, but to access the package contents in a current R session you must explicitly load its contents via the `library` function.

In this exercise, we will load and prep the data for a point pattern analysis using the `spatstat` package. We will therefore not need to load the `spdep` package which won't be used until we tackle spatial autocorrelation in later exercises.

```{r}
library(sf)
library(spatstat)
library(terra)
```

# Loading GIS data into R

## Loading shapefiles

Note that R will recognize vector data models stored as shapefiles, but it will *not* recognize GIS files stored in geodatabases.

First, we will load the Massachusetts polygon shapefile into R and save the contents of that shapefile to an object called `s2`. Note the use of the assignment operator `<-` which *assigns* the output to its right to the object to its left. The name of the shapefile must end with the `*.shp` extension, but note that the function understands that the shapefile consists of *multiple* files.

```{r}
s2 <- st_read("MA.shp")
``` 

 
> NOTE: if you get the error message `Error: Cannot open "MA.shp"; The file doesn't seem to exist.`, then you probably did not properly set the working directory (see earlier step) or you have a syntax error in the filename.

R can store spatial objects in different internal formats. `spatstat`'s functions require that a specific spatial format be used. The `MA` states layer will be used to define the study extent. This will require that it be converted to an `owin` formatted object for use with `spatstat`. We will make use of the `as.owin` function to convert the `s2` object to an `owin` object.

```{r}
w  <- as.owin(s2)
```

The coordinate unit associated with the spatial object inherits the underlying coordinate system's map units--`meters` in this example. Such small units may make it difficult to interpret the output of some operations given that some analyses may generate very small values (i.e. density based analyses) or very large values (i.e. distance based analyses). We will therefore convert the map units from meters to kilometers using the `rescale.owin()` function. Note that 1000 m = 1 km.

```{r}
w.km <- rescale.owin(w, 1000)
```

The second parameter in the `rescale.owin()` function, `1000`, tells R to divide the planar unit by 1000.

Next we will load the Walmart stores shapefile (`Walmarts.shp`) using the same functions, but instead of storing the shapefile as a polygon boundary, we will convert the point shapefile to a `ppp` formatted point object.

```{r}
s1 <- st_read("Walmarts.shp")  
p  <- as.ppp(s1)  # creates a ppp object
p.km <- rescale.ppp(p, 1000)
```


By default, R will adopt a rectangular extent for the point data. 

![](img/image5.jpg){width="220"}


Given that we will be defining the extent to match that of the Massachusetts boundaries, we will need to explicitly define the study extent for the point object. 

![](img/image6.jpg){width="220"}

```{r}
Window(p.km) <- w.km
```

There is one more thing that we will need to do that will make the data behave with `spatstats` tools: remove the layer's attribute information (attributes are also known as *marks* in the point pattern analysis world). The point attributes will not be needed here since our interest is in the pattern generated by the points and not by their attribute values.

```{r}
marks(p.km) <- NULL
```

## Loading Raster Files

Next, we will load the population density raster file `pop_sqmile.img` using the `rast()` function from the `terra` package, then we'll convert it to an `im` object recognized by spatstat and name the object `r.km` once re-scaled.

```{r}
img  <- rast("pop_sqmile.img") # Load raster file
df <- as.data.frame(img, xy = TRUE) # Convert to XYZ data table
r    <- as.im(df)             # Convert XYZ table to im object
r.km <- rescale.im(r, 1000)
```

# Visualizing Spatial Objects

We can plot the raster and overlay it with the point layer. Several plotting options are available including the base `plot` function which will be used in this tutorial. However, there are many R packages that will help improve the "look" of a map including `tmap` and `ggplot2`.

In the following code chunk, we will plot the point data. We'll assign a yellow fill color to the point symbol. The point symbol type is defined by the `pch = 21` parameter.

```{r fig.width=4, fig.height=2, echo = 2}
OP <- par(mar=c(0,0,3,2))
plot(p.km, pch = 21, bg = "yellow", main = "Walmart stores")
par(OP)
```

Point symbol types are defined by a number. The above point symbol is number `21`. Other point symbols available in R are shown below:

```{r echo=FALSE, fig.height=3, fig.width=4}
OP <- par(mar=c(0,0,0,2))
plot(rep(1:5,5), rep(1:5, each = 5), pch=1:25, col="blue", bg="red", 
     cex=1.5, xlab = NA, ylab = NA, axes = F, xlim=c(0,6), ylim=c(0,6))
text(rep(1:5,5), rep(1:5, each = 5), as.character(1:25), pos=4)
par(OP)
```

To plot a raster, you can use the `image` function (as well as the `plot` function). Here, we'll adopt a built-in color scheme using the `hcl.colors` function.

```{r fig.width=4, fig.height=2, echo = 2}
OP <- par(mar=c(0,0,3,2))
image(r.km, main = "Population density", col = hcl.colors(50, rev = TRUE))
par(OP)
```

In the following chunk of code, we will plot both the raster and point layers. To add a "layer" to an existing map, include the `add = TRUE` parameter.

```{r fig.width=4, fig.height=2, echo = 2:3}
OP <- par(mar=c(0,0,3,2))
image(r.km, main = "Population density", col = hcl.colors(50, rev = TRUE))
plot(p.km, pch = 16, add = TRUE)
par(OP)
```

This wraps up this tutorial.
