{"title":"ANN Hypothesis Testing: homogeneous case","markdown":{"yaml":{"title":"ANN Hypothesis Testing: homogeneous case","author":"Manny Gimond"},"headingText":"Load and prep the dataset","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning=FALSE, results=\"hide\", tidy=FALSE )\n```\n\n------------------------------------------------------------------------\n\n[Data for this tutorial can be downloaded [from here](./walmarts.zip). Don't forget to unzip the files to a dedicated folder on your computer.]{.block1}\n\n-----\n\n> In RStudio, don't forget to set the R session to the project folder via *Session \\>\\> Set Working Directory \\>\\> Choose Directory*.\n\n-----\n\n\nThe following chunk of code loads the shapefiles into R. They are then converted to  spatial formats readable by the `spatstat` functions. We will also convert the mapping units from meters to kilometers using the `rescale.*` functions. This last step will generate distance values of kilometers instead of meters when we compute the average nearest neighbor value. Much like ArcGIS, R adopts the layer's coordinate system's map units when expressing distance or area values, so by changing the layer's default map units, we end up with output distance values that are no more than 3 or 4 digits long and easier to \"interpret\". \n\n\n```{r, message=FALSE, results='hide', message=FALSE, warning=FALSE}\n# Load packages\nlibrary(sf)\nlibrary(spatstat)\n\n# Read state polygon data\ns2  <- st_read(\"MA.shp\")\nw  <- as.owin(s2)\nw.km <- rescale.owin(w, 1000)  # rescale map units to km\n\n# Read Walmart point data\ns1  <- st_read(\"Walmarts.shp\")\np  <- as.ppp(s1)\nmarks(p) <- NULL  # Remove attribute table (simplifies plot operations)\np.km <- rescale.ppp(p, 1000) # Rescale map units to km\nWindow(p.km) <- w.km      \n```\n\n## Average nearest neighbor analysis\n\nFirst, we'll compute the observed Walmart ANN statistic.\n\n```{r}\nann.p <- mean(nndist(p.km, k=1))\nann.p\n```\n\nThe observed average nearest neighbor is `r round(ann.p, 2)` km.\n\n### Is our observed ANN value consistent with a random process?\n\nIn this hypothesis test, we are hypothesizing that the process that generated the observed distribution of Walmart stores was completely random. This is our **null hypothesis**. We'll therefore compare our observed ANN value to the *range* of ANN values we could expect to get *if* the Walmart stores were randomly distributed. This will involve randomly shuffling the Walmart store locations, then computing the average distance between the randomly distributed stores. This process is repeated many times such that a distribution of ANN values under the assumption of complete randomness (the null hypothesis) is generated.\n\n```{r}\nn     <- 1999       # Number of times to run the simulation\nann.r <- vector()   # Create an empty object to be used to store the simulated  ANN values\n\nfor (i in 1:n){\n  rand.p   <- rpoint(n = p.km$n, win = w.km)  # Generate random point locations\n  ann.r[i] <- mean(nndist(rand.p, k = 1))     # Compute and store the simulated ANN value\n}\n```\n\nIn the above loop, the function `rpoint` is passed two parameters: `n = p.km$n` and `win = w.km`. The first tells the function how many points to randomly generate (i.e. the same number of points as that in the Walmart points layer which we can extract from the `p.km$n` object). The second tells the function to confine the randomly generated points to the extent defined by `w.km` (the `MA` polygon).\n\nNote that after running the last simulation, you can view its set of randomly generated points via:\n\n```{r fig.height=1.5, echo=2}\nOP <- par(mar = c(0,0,0,0))\nplot(rand.p, pch = 16, main = NULL)\npar(OP)\n```\n\nGiven that this is a random process, your output will look different--as expected.\n\nNext, we plot the histogram of the simulated ANN values then add a blue line showing where our observed ANN value lies relative to the distribution of simulated ANN values under the null. (Your histogram may look different given the random nature of the simulation).\n\n```{r, fig.height=2, echo=2:3}\nOP <- par(mar=c(4,4,0,0))\nhist(ann.r, breaks = 40, col = \"bisque\", xlim = range(ann.p, ann.r), main = NULL)\nabline(v = ann.p, col = \"blue\", lw = 2)  # lw = 2 increases the line width\npar(OP)\n```\n\nThe test suggests that our observed ANN value may not be that different from the `r n` ANN values we simulated under the assumption that the stores are randomly distributed. Our observed values is a tad bit to the right of the center of the distribution suggesting that our observed ANN value might be on the dispersed side of the range of values (a larger than expected ANN value suggests a more dispersed set of points, and a smaller than expected ANN value suggests a more clustered set of points).\n\n### Extracting a p-value from the simulation\n\nWe first need to find the end of the distribution that is *closest* to the observed ANN value. We then find the number of simulated ANN values more extreme than our observed ANN value. Finally, we divide that count by the total number of simulations. Note that this is a so-called *one-sided* P-value. See [lecture notes](https://mgimond.github.io/Spatial/hypothesis-testing.html#a-better-approach-a-monte-carlo-test) for more information.\n\n```{r results = 'asis'}\nN.greater <- sum(ann.r > ann.p)\np <- min(N.greater + 1, n + 1 - N.greater) / (n + 1)\np\n```\n\nAbout `r round(p, 2) * 100`% of the simulated ANN value were more extreme than our observed ANN value of `r round(ann.p, 2)` (Note that your p-value may be slightly different given that the p-value results from random events). Hence, **the p-value suggests that there is a `r round(p, 2) * 100`% of observing an ANN value as extreme as ours if the null hypothesis (CRS) were true**.\n\n::: {style=\"background:#FFE4C4;\"}\nNOTES:\n\n-   If you are familiar with the concepts of a one-sided and two-sided test, you could double the p-value and state that *\"... there is a `r round(p, 2) * 2 * 100`% chance  that a random process could have generated an ANN statistic as extreme as ours\"*. Note the lack of reference to **greater than** or **less than**.\n\n-   Just because our hypothesis test suggests that our observed ANN value is consistent with a random process does not imply that a random process was **the** process behind the distribution of Walmart stores (in fact, it's quite doubtful that Walmart executives assign store location at random). All that a hypothesis test can do is state whether a hypothesized process could be one of **many** other processes that generated the pattern observed in our dataset.\n:::\n\n\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning=FALSE, results=\"hide\", tidy=FALSE )\n```\n\n------------------------------------------------------------------------\n\n[Data for this tutorial can be downloaded [from here](./walmarts.zip). Don't forget to unzip the files to a dedicated folder on your computer.]{.block1}\n\n-----\n\n> In RStudio, don't forget to set the R session to the project folder via *Session \\>\\> Set Working Directory \\>\\> Choose Directory*.\n\n-----\n\n## Load and prep the dataset\n\nThe following chunk of code loads the shapefiles into R. They are then converted to  spatial formats readable by the `spatstat` functions. We will also convert the mapping units from meters to kilometers using the `rescale.*` functions. This last step will generate distance values of kilometers instead of meters when we compute the average nearest neighbor value. Much like ArcGIS, R adopts the layer's coordinate system's map units when expressing distance or area values, so by changing the layer's default map units, we end up with output distance values that are no more than 3 or 4 digits long and easier to \"interpret\". \n\n\n```{r, message=FALSE, results='hide', message=FALSE, warning=FALSE}\n# Load packages\nlibrary(sf)\nlibrary(spatstat)\n\n# Read state polygon data\ns2  <- st_read(\"MA.shp\")\nw  <- as.owin(s2)\nw.km <- rescale.owin(w, 1000)  # rescale map units to km\n\n# Read Walmart point data\ns1  <- st_read(\"Walmarts.shp\")\np  <- as.ppp(s1)\nmarks(p) <- NULL  # Remove attribute table (simplifies plot operations)\np.km <- rescale.ppp(p, 1000) # Rescale map units to km\nWindow(p.km) <- w.km      \n```\n\n## Average nearest neighbor analysis\n\nFirst, we'll compute the observed Walmart ANN statistic.\n\n```{r}\nann.p <- mean(nndist(p.km, k=1))\nann.p\n```\n\nThe observed average nearest neighbor is `r round(ann.p, 2)` km.\n\n### Is our observed ANN value consistent with a random process?\n\nIn this hypothesis test, we are hypothesizing that the process that generated the observed distribution of Walmart stores was completely random. This is our **null hypothesis**. We'll therefore compare our observed ANN value to the *range* of ANN values we could expect to get *if* the Walmart stores were randomly distributed. This will involve randomly shuffling the Walmart store locations, then computing the average distance between the randomly distributed stores. This process is repeated many times such that a distribution of ANN values under the assumption of complete randomness (the null hypothesis) is generated.\n\n```{r}\nn     <- 1999       # Number of times to run the simulation\nann.r <- vector()   # Create an empty object to be used to store the simulated  ANN values\n\nfor (i in 1:n){\n  rand.p   <- rpoint(n = p.km$n, win = w.km)  # Generate random point locations\n  ann.r[i] <- mean(nndist(rand.p, k = 1))     # Compute and store the simulated ANN value\n}\n```\n\nIn the above loop, the function `rpoint` is passed two parameters: `n = p.km$n` and `win = w.km`. The first tells the function how many points to randomly generate (i.e. the same number of points as that in the Walmart points layer which we can extract from the `p.km$n` object). The second tells the function to confine the randomly generated points to the extent defined by `w.km` (the `MA` polygon).\n\nNote that after running the last simulation, you can view its set of randomly generated points via:\n\n```{r fig.height=1.5, echo=2}\nOP <- par(mar = c(0,0,0,0))\nplot(rand.p, pch = 16, main = NULL)\npar(OP)\n```\n\nGiven that this is a random process, your output will look different--as expected.\n\nNext, we plot the histogram of the simulated ANN values then add a blue line showing where our observed ANN value lies relative to the distribution of simulated ANN values under the null. (Your histogram may look different given the random nature of the simulation).\n\n```{r, fig.height=2, echo=2:3}\nOP <- par(mar=c(4,4,0,0))\nhist(ann.r, breaks = 40, col = \"bisque\", xlim = range(ann.p, ann.r), main = NULL)\nabline(v = ann.p, col = \"blue\", lw = 2)  # lw = 2 increases the line width\npar(OP)\n```\n\nThe test suggests that our observed ANN value may not be that different from the `r n` ANN values we simulated under the assumption that the stores are randomly distributed. Our observed values is a tad bit to the right of the center of the distribution suggesting that our observed ANN value might be on the dispersed side of the range of values (a larger than expected ANN value suggests a more dispersed set of points, and a smaller than expected ANN value suggests a more clustered set of points).\n\n### Extracting a p-value from the simulation\n\nWe first need to find the end of the distribution that is *closest* to the observed ANN value. We then find the number of simulated ANN values more extreme than our observed ANN value. Finally, we divide that count by the total number of simulations. Note that this is a so-called *one-sided* P-value. See [lecture notes](https://mgimond.github.io/Spatial/hypothesis-testing.html#a-better-approach-a-monte-carlo-test) for more information.\n\n```{r results = 'asis'}\nN.greater <- sum(ann.r > ann.p)\np <- min(N.greater + 1, n + 1 - N.greater) / (n + 1)\np\n```\n\nAbout `r round(p, 2) * 100`% of the simulated ANN value were more extreme than our observed ANN value of `r round(ann.p, 2)` (Note that your p-value may be slightly different given that the p-value results from random events). Hence, **the p-value suggests that there is a `r round(p, 2) * 100`% of observing an ANN value as extreme as ours if the null hypothesis (CRS) were true**.\n\n::: {style=\"background:#FFE4C4;\"}\nNOTES:\n\n-   If you are familiar with the concepts of a one-sided and two-sided test, you could double the p-value and state that *\"... there is a `r round(p, 2) * 2 * 100`% chance  that a random process could have generated an ANN statistic as extreme as ours\"*. Note the lack of reference to **greater than** or **less than**.\n\n-   Just because our hypothesis test suggests that our observed ANN value is consistent with a random process does not imply that a random process was **the** process behind the distribution of Walmart stores (in fact, it's quite doubtful that Walmart executives assign store location at random). All that a hypothesis test can do is state whether a hypothesized process could be one of **many** other processes that generated the pattern observed in our dataset.\n:::\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"Homogenous_ANN.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":["cosmo","../custom.scss"],"title":"ANN Hypothesis Testing: homogeneous case","author":"Manny Gimond"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}