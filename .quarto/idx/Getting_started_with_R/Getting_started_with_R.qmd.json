{"title":"Loading and visualizing data in R","markdown":{"yaml":{"title":"Loading and visualizing data in R","author":"Manny Gimond"},"headingText":"Setting up the R environment","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning=FALSE, results=\"hide\", tidy=FALSE )\n```\n\n------------------------------------------------------------------------\n\n[Data for this tutorial can be downloaded [from here](./data.zip). Don't forget to unzip the files to a dedicated folder on your computer.]{.block1}\n\n\n------------------------------------------------------------------------\n\nR is a data analysis environment. RStudio is a desktop interface to R (sometimes referred to as an integrated development environment-or IDE for short). Unlike most desktop environments you have been exposed to so far, R does not take instructions from a point-and-click environment, its instructions are provided by simple lines of text.\n\n\n## Installing packages\n\nThis R session will make use of five packages: `spatstat` which has all of the spatial statistics tools used in this exercise; `sf` which is used to load the vector files; `maptools` which converts the raster format to an 'im' format recognized by `spatstat`; and `raster` which is used to manipulate raster files. You'll also need to install `rgdal` to help the `raster` package read the `.img` raster file.\n\nYou can install packages in one of two ways: via command line or via the RStudio interface.\n\n### Option 1: Command line\n\n```{r eval=FALSE}\ninstall.packages(\"sf\")\ninstall.packages(\"spatstat\")\ninstall.packages(\"raster\")\ninstall.packages(\"rgdal\")\ninstall.packages(\"maptools\")\n```\n\n### Option 2: RStudio interface\n\n![](img/image1.jpg)\n\n## Opening a new R script\n\nIf an empty R script file is not opened in RStudio open a new one now.\n\n![](img/image2.jpg){width=\"242\"}\n\nR scripts are usually saved using the .R extension (e.g. Day14.R). Make sure to save this script on a regular basis as you add/modify pieces of code.\n\n## Setting an R session's workspace\n\nIf you plan to read or write files from/to a directory, you might find it beneficial to explicitly define the R session's project folder. To set a session's working directory, go to **Session \\>\\> Set Working Directory \\>\\> Choose Directory**. In this example, you will want to set the working directory to the folder that houses the in-class dataset downloaded from filer (e.g. the `walmart/` folder).\n\n![](img/image3.jpg){width=\"409\"}\n\n## Loading (activating) packages\n\nInstalling packages under your user profile is a one-time process, but to access the package contents in a current R session you must explicitly load its contents via the `library` function.\n\n```{r}\nlibrary(sf)\nlibrary(spatstat)\nlibrary(raster)\nlibrary(maptools) \n```\n\nNote that you do not need to load the `rgdal` package since its functionality is used in the `raster` package.\n\n# Loading GIS data into R\n\n## Loading shapefiles\n\nNote that R will recognize vector data models stored as shapefiles, but it will *not* recognize GIS files stored in geodatabases.\n\nFirst, we will load the Massachusetts polygon shapefile into R and save the contents of that shapefile in an object called `s2`. Note the use of the assignment operator `<-` which *assigns* the output to its right to the object to its left. The name of the shapefile must end with the `*.shp` extension, but note that the function understands that the shapefile consists of multiple files.\n\n```{r}\ns2 <- st_read(\"MA.shp\")\n```\n\n> NOTE: if you get the error message `Error: Cannot open \"MA.shp\"; The file doesn't seem to exist.`, then you probably did not properly set the working directory in an earlier step or you have a syntax error in the filename.\n\nR can store spatial objects in different internal formats but `spatstat`'s functions require that specific spatial formats be used. The `MA` states layer will be used to define the study extent which will require that it be stored as a `owin` object. We will make use of the `as.owin` function to convert the `s2` object to an `owin` object.\n\n```{r}\nw  <- as.owin(s2)\n```\n\nThe coordinate unit associated with the spatial object inherits the underlying coordinate system's map units--`meters` in our example. Such small units may make it difficult to interpret the output of some analyses (e.g. distance based and density based analyses). We will therefore convert the map units from meters to kilometers using the `rescale()` function. Note that 1000 m = 1 km.\n\n```{r}\nw.km <- rescale(w, 1000)\n```\n\nThe second parameter in the `rescale()` function, `1000`, tells R to divide the current measure of unit by 1000.\n\nNext we will load the Walmarts stores shapefile (`Walmarts.shp`) using the same functions, but instead of storing the shapefile as a polygon boundary, we will convert the point shapefile to a `ppp` point object.\n\n```{r}\ns1 <- st_read(\"Walmarts.shp\")  \np  <- as.ppp(s1)  # creates a ppp object\np.km <- rescale(p, 1000)\n```\n\nWe will need to explicitly define the study extent for the point object. This will be critical when running the point process models.\n\n```{r}\nWindow(p.km) <- w.km\n```\n\nThere is one more thing that we will need to do that will make the data behave with `spatstats` tools: remove the layer's attribute information (point attributes are also known as *marks* in the point pattern analysis world). The point attributes will not be needed here since our interest is in the pattern generated by the points and not by their attribute values.\n\n```{r}\nmarks(p.km) <- NULL\n```\n\n## Loading Raster Files\n\nNext, we will load the population density raster file `pop_sqmile.img` using the `raster` function from the `raster` package, convert it to an `im` object recognized by spatstat and name the object `r.km` once re-scaled.\n\n```{r}\nimg  <- raster(\"./pop_sqmile.img\") # Creates a raster object\nr    <- as.im(img)  # Convert r object to an im object\nr.km   <- rescale(r, 1000)\n```\n\n# Visualizing Spatial Objects\n\nWe can plot the raster and overlay it with the point layer. Several plotting options are available including the base `plot` function which will be used in this tutorial). However, there are many R packages that will help improve the \"look\" of a map including `tmap` and `ggplot2`.\n\nIn the following code chunk, we will plot the point data. We'll assign a yellow fill color to the point symbol. The point symbol type is defined by the `pch = 21` parameter.\n\n```{r fig.width=4, fig.height=2, echo = 2}\nOP <- par(mar=c(0,0,3,2))\nplot(p.km, pch = 21, bg = \"yellow\", main = \"Walmart stores\")\npar(OP)\n```\n\nPoint symbol types are defined by a number. The above point symbol is number `21`. Other point symbols available in R are shown below:\n\n```{r echo=FALSE, fig.height=3, fig.width=4}\nOP <- par(mar=c(0,0,0,2))\nplot(rep(1:5,5), rep(1:5, each = 5), pch=1:25, col=\"blue\", bg=\"red\", \n     cex=1.5, xlab = NA, ylab = NA, axes = F, xlim=c(0,6), ylim=c(0,6))\ntext(rep(1:5,5), rep(1:5, each = 5), as.character(1:25), pos=4)\npar(OP)\n```\n\nTo plot a raster, you can use the `image` function (as well as the `plot` function). Here, we'll adopt a built-in color scheme using the `hcl.colors` function.\n\n```{r fig.width=4, fig.height=2, echo = 2}\nOP <- par(mar=c(0,0,3,2))\nimage(r.km, main = \"Population density\", col = hcl.colors(50, rev = TRUE))\npar(OP)\n```\n\nIn the following chunk of code, we will plot both the raster and point layers. To add a \"layer\" to an existing map, include the `add = TRUE` parameter.\n\n```{r fig.width=4, fig.height=2, echo = 2:3}\nOP <- par(mar=c(0,0,3,2))\nimage(r.km, main = \"Population density\", col = hcl.colors(50, rev = TRUE))\nplot(p.km, pch = 16, add = TRUE)\npar(OP)\n```\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"Getting_started_with_R.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.36","theme":["cosmo","../custom.scss"],"title":"Loading and visualizing data in R","author":"Manny Gimond"},"extensions":{"book":{"multiFile":true}}}}}