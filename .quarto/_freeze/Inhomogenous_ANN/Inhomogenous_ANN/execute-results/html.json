{
  "hash": "4a6a484e4c42288b38694c1d89031ba6",
  "result": {
    "markdown": "---\ntitle: \"ANN Hypothesis Testing: inhomogeneous case\"\nauthor: \"Manny Gimond\"\n---\n\n\n\n\n\n------------------------------------------------------------------------\n\n[Data for this tutorial can be downloaded [from here](./data.zip). Don't forget to unzip the files to a dedicated folder on your computer.]{.block1}\n \n-------\n\n> Don't forget to set the R session to the project folder via *Session \\>\\> Set Working Directory \\>\\> Choose Directory*.\n\n-------\n\n## Load and prep the dataset\n\nIn the following chunk of code, we will load the shapefiles into R, then we will convert the spatial objects into formats that are readable by the `spatstat` functions. We will also convert the mapping units from meters to kilometers using the `rescale` function.\n\nAs was noted in our PPM analysis of the population data, given its strongly skewed distribution we found it best to express it on a log scale as opposed to a linear scale. We'll therefore adopt this log scale in this analysis too.\n\n\n::: {.cell hash='Inhomogenous_ANN_cache/html/unnamed-chunk-1_80a89fc3a23c3344f5e8d0086b3de332'}\n\n```{.r .cell-code}\n# Load packages\nlibrary(sf)\nlibrary(maptools)\nlibrary(spatstat)\nlibrary(raster)\n\n# Read state polygon data\ns  <- st_read(\"MA.shp\")\nw  <- as.owin(s)\nw.km <- rescale(w, 1000)\n\n# Read Walmart point data\ns  <- st_read(\"Walmarts.shp\")\np  <- as.ppp(s)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in as.ppp.sf(s): only first attribute column is used for marks\n```\n:::\n\n```{.r .cell-code}\nmarks(p) <- NULL\np.km <- rescale(p, 1000)\nWindow(p.km) <- w.km     \n\n# Read population raster\nimg     <- raster(\"./pop_sqmile.img\") # Creates a raster object\npop     <- as.im(img)  # Convert r object to an im object\npop.km  <- rescale(pop, 1000)\npop.km.log <- log(pop.km)  # Log transform population data\n```\n:::\n\n\n## Average nearest neighbor analysis\n\nFirst, we'll compute the observed Walmart ANN statistic.\n\n\n::: {.cell hash='Inhomogenous_ANN_cache/html/unnamed-chunk-2_7bc1f73f18ffddeddec39f2d9b13b778'}\n\n```{.r .cell-code}\nann.p <- mean(nndist(p.km, k=1))\nann.p\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13.29478\n```\n:::\n:::\n\n\nThe observed average nearest neighbor is 13.29 km.\n\n### Is our observed ANN value consistent with a random process when controlled for population distribution (inhomogeneous process)?\n\nIn our earlier analysis of the point pattern, we calculated a (pseudo) p-value of around 0.33. The problem with our initial ANN analysis is that we did not account for [1^st^ order effects](https://mgimond.github.io/Spatial/chp11-0.html#first-and-second-order-effects) of the underlying process such as population distribution (a possible covariate). In other words, is the distance observed between Walmart stores a reflection of the attractive/repulsive forces at play when positioning the stores within the state of Massachusetts or is their proximity to one another dictated by some underlying process such as population density distribution?\n\nIf we are to assume that population distribution will influence the distribution of Walmart stores, we need to rerun the ANN analysis while **controlling** for population distribution influence. We do this by instructing the `rpoint()` function to increase point placement probability at locations with high covariate values (i.e. a high population density area is more likely to receive a random point than a low density area).\n\n\n::: {.cell hash='Inhomogenous_ANN_cache/html/unnamed-chunk-3_83b51f4894eb7188660f00769212aea6'}\n\n```{.r .cell-code}\nn     <- 999\nann.het <- vector()\nfor (i in 1:n){\n  rand.p   <- rpoint(n = p.km$n, f = pop.km.log, win = w.km) \n  ann.het[i] <- mean(nndist(rand.p, k = 1))\n}\n```\n:::\n\n\nThe above loop is almost identical to that of the homogeneous case except with the addition of the `f = pop.km.log` argument which defines the intensity of the underlying process (`pop.km.log` represents the population density raster). The `rpoint` function rescales the raster values to a range of `[0,1]` where `1` designates maximum probability of a pixel receiving a point and `0` minimum (or no) probability of a pixel receiving a point. Note that this is still a random process in that each time the `rpoint` function is run, we'll have a different point pattern. However, on average, more points will be located where the `pop.km.log` pixels have the highest values.\n\nNote that the `f =` parameter will supersede that of the `win =` parameter. In other words, if `pop.km.log` covers a different extent than `w.km`, the `rpoint()` function will generate random points within the `pop.km.log` extent instead of the `w.km` extent.\n\nThe following map shows an example of how the Walmart store distribution *could* look like *if* dictated by population alone.\n\n\n::: {.cell hash='Inhomogenous_ANN_cache/html/unnamed-chunk-4_e4419fe2b1a8e20e67565003e296bc3d'}\n\n```{.r .cell-code}\nplot(rand.p, pch = 16, main = NULL)\n```\n\n::: {.cell-output-display}\n![](Inhomogenous_ANN_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nNow let's plot the histogram of simulated ANN values:\n\n\n::: {.cell hash='Inhomogenous_ANN_cache/html/unnamed-chunk-5_91a83423c47dab43e5ef6a637d12ae78'}\n\n```{.r .cell-code}\nhist(ann.het, breaks = 40, col = \"bisque\", xlim = range(ann.p, ann.het), main = NULL)\nabline(v = ann.p, col = \"blue\", lw = 2)\n```\n\n::: {.cell-output-display}\n![](Inhomogenous_ANN_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThe histogram is displaying the range of expected ANN values when the placement of Walmart points are dictated by the population distribution.\n\nOur observed ANN value lies to the right of the distribution center suggesting that our observed Walmart may be more *dispersed* than expected under the current hypothesis. This makes sense since you would expect there to be a minimum distance between stores to avoid overlapping markets.\n\n\n::: {.cell hash='Inhomogenous_ANN_cache/html/unnamed-chunk-6_0cffc04eb1b8d1b5a4f2b2ca791643df'}\n\n```{.r .cell-code}\nN.greater <- sum(ann.het > ann.p)\np <- min(N.greater + 1, n + 1 - N.greater) / (n +1)\np\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.148\n```\n:::\n:::\n\n\n## Final note\n\nWhile the wording in the last paragraph may imply that it's the *observed* ANN value that has shifted along the x-axis relative to the hypothesized distribution, it's really the distribution that gets shifted along the x-axis. The following plot overlays the expected ANN distribution given a homogeneous 1^st^ order process in red and the expected ANN distribution given the inhomogeneous 1^st^ order process in green. The observed ANN value of 13.3 km is constant under both analyses.\n\n\n\n\n::: {.cell hash='Inhomogenous_ANN_cache/html/unnamed-chunk-7_635f8406f12be5e79e91e90d848afbee'}\n\n:::\n::: {.cell hash='Inhomogenous_ANN_cache/html/unnamed-chunk-8_31f66d5e8a90f0dc229ef88203c84a07'}\n\n```{.r .cell-code}\nn     <- 1999       \nann.hom <- vector()   \n\nfor (i in 1:n){\n  rand.p   <- rpoint(n = p.km$n, win = w.km)  \n  ann.hom[i] <- mean(nndist(rand.p, k = 1))    \n}\n\nh1 <- hist(ann.hom, breaks=40, col = \"bisque\",  \n           main = NULL, plot = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in hist.default(ann.hom, breaks = 40, col = \"bisque\", main = NULL, :\narguments 'col', 'main' are not made use of\n```\n:::\n\n```{.r .cell-code}\nh2 <- hist(ann.het, breaks=40, col = \"green\",  \n           main = NULL, plot = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in hist.default(ann.het, breaks = 40, col = \"green\", main = NULL, :\narguments 'col', 'main' are not made use of\n```\n:::\n\n```{.r .cell-code}\nplot(h1,  xlim=range(c(ann.hom, ann.het, ann.het)),\n     main = \"Homogeneous (red) vs Inhomogeneous (Green)\",\n     col = rgb(1,0,0,0.5), border = \"red\",\n     xlab = \"ANN (km)\")\nplot(h2, col = rgb(0,1,0,0.5), add = TRUE, border = \"green\")\nabline(v = ann.p, col = \"blue\", lw = 3)\n```\n\n::: {.cell-output-display}\n![](Inhomogenous_ANN_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Addendum\n\nIt's good practice to indicate, in your analysis results, if you use a transformed version of the covariate since this can impact the outcome of the analysis. In the following example, the original linear version of the population raster is used.\n\n\n::: {.cell hash='Inhomogenous_ANN_cache/html/unnamed-chunk-9_826461237af1b014a7da745c1ca72d22'}\n\n```{.r .cell-code}\nann.r <- vector()\nfor (i in 1:n){\n  rand.p   <- rpoint(n = p.km$n, f = pop.km, win = w.km) \n  ann.r[i] <- mean(nndist(rand.p, k = 1))\n}\n```\n:::\n\n::: {.cell hash='Inhomogenous_ANN_cache/html/unnamed-chunk-10_8cd2c03d2d19b4e4712ff34ae891e418'}\n\n```{.r .cell-code}\nhist(ann.r, breaks = 40, col = \"bisque\", xlim = range(ann.p, ann.r), main = NULL)\nabline(v = ann.p, col = \"blue\", lw = 2)\n```\n\n::: {.cell-output-display}\n![](Inhomogenous_ANN_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='Inhomogenous_ANN_cache/html/unnamed-chunk-11_76756f6c4a87429398b53b9d50b9ea51'}\n\n```{.r .cell-code}\nN.greater <- sum(ann.r > ann.p)\np <- min(N.greater + 1, n + 1 - N.greater) / (n + 1)\np\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.0015\n```\n:::\n:::\n\n\nThe outcome of this analysis is quite different from the one using the raw population density values. **Both outcomes are perfectly valid**, but they address slightly different questions: \"When controlling for the population density distribution, are Walmart stores randomly distributed?\" vs. \"When controlling for the population density distribution **as measured on a log scale**, are Walmart stores randomly distributed?\"\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}