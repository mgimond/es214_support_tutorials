{
  "hash": "818de0ace38cdc108cfb3639f777d4c3",
  "result": {
    "markdown": "---\ntitle: \"Quantifying Point Patterns in R\"\nauthor: \"ES214\"\noutput:\n  html_document:\n    toc: yes\n    toc_float: \n      collapsed: false\n  word_document: default\n---\n\n\n\n\n------------------------------------------------------------------------\n\n> Data for this tutorial can be downloaded [here](https://github.com/mgimond/es214_support_tutorials/raw/main/Intro_to_point_patterns/bei.zip).\n\n# R vs RStudio\n\n\nR is a data analysis environment. RStudio is a desktop interface to R (sometimes referred to as an integrated development environment-or IDE for short). Unlike most desktop environments you have been exposed to so far, R does not take instructions from a point-and-click environment, its instructions are provided by simple lines of text.\n\nIn this course, we will make use of RStudio to run R code. To access RStudio from a lab computer, simply click on the Windows Start icon in the lower left-hand corner and select RStudio.\n\nYou are also free to install R and RStudio on your personal computers if you want to work on your own computer (this may be userful for those of you living downtown).\n\nFor this exercise and subsequent R exercises in this course, **DO NOT** use the RStudio server (the web based RStudio) you may have used in other courses. The server uses an older version of R and may not allow you to successfully install packages needed in this course.\n\n\n# Setting up the R/RStudio environment\n\n\n## Installing packages\n\nThis R session will make use of two packages: `spatstat` which has all of the point analysis tools used in this course and `sf` which is used to load and manipulate GIS files.\n\nYou can install packages in one of two ways: via command line or via the RStudio interface.\n\n### Option 1: Command line\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"sf\")\ninstall.packages(\"spatstat\")\n```\n:::\n\n\n### Option 2: RStudio interface\n\n![](img/image1.jpg){width=\"394\"}\n\n\n## Setting an R session's workspace\n\nIf you plan to read or write files from/to a directory, you will need  to explicitly define the R session's project folder. To set a session's working directory, go to **Session \\>\\> Set Working Directory \\>\\> Choose Directory**. In this example, you would set the working directory to your *HW15* folder if this is where you have your shapefiles stored.\n\n![](img/image3.jpg){width=\"409\"}\n\n## Opening a new R script\n\n\nR can be run interacively through the console. But when typing multiple lines of code, it's best to create a new R script that you will be able to save to your project folder. To open an empty R script in RStudio, click on the upper-left icon and select `R Script`.\n\n\n![](img/image2.jpg){width=\"242\"} \n\nThis will add a new R script in the upper-left pane of your desktop environment.\n\n![](img/image2b.jpg){width=\"242\"}\n\nR scripts are usually saved via the `File >> Save As ...` menu with the .R extension (e.g. `HW15.R`). Make sure to save this script on a regular basis as you add/modify pieces of code.\n\n\n## Loading (activating) packages\n\nInstalling packages under your user profile is a one-time process, but to access the package contents in a current R session you must explicitly load its contents via the `library` function. \n\nIn the empty script, type the following lines of code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(spatstat)\n```\n:::\n\n\nTyping commands in the R script will not automatically execute those scripts it is best to execute each line one at a time, even if you have multiple lines of code. Running each line one at the time makes it easier to troubleshoot your script.\n\nPlace the cursor anywhere on the first line of code (usually at the end of the line).\n\n![](img/image2c.jpg){width=\"242\"}\n\nNext, type the keys `Ctrl` + `Enter` on your Windows keyboard. If you are using a Mac, the shortcut key is `Cmd` + `Return`.\n\nEverytime you execute a command, some text will appear in the console pane. Here, you shoudl see a few lines inidicating that the package (and its dependencies) were properly loaded. Do not be alarmed by the red text color. This id the default color used by RStudio to show output from a command.\n\n![](img/image2d.jpg){width=\"300\"}\n\nIf you get an error message indicating that the package cannot be found, check that you properly typed the function and package name and that you properly installed the package as outlined in an earlier step.\n\nNow execute the second line of code by typing `Ctrl` + `Enter` (or `Cmd` + `Return` on a Mac). Make sure that the cursor is already on that line before executing. \n\nYou should see the following output:\n\n![](img/image2e.jpg){width=\"400\"}\n\nGoing forward, every time you type a new set of instructions in the script, follow-up with a `Ctrl` + `Enter` to have R execute the code.\n\n# Loading GIS data into R\n\n## Loading shapefiles\n\nThe `sf` package we just loaded will allow R to read shapefiles.\n\nFirst, we will load the `extent.shp` polygon shapefile into R and save the contents of that shapefile in an object called `shp.extent`. Note the use of the assignment operator `<-` which *assigns* the output to its right, to the object to its left. The name of the shapefile must end with the `*.shp` extension, but note that the function understands that the shapefile consists of multiple files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshp.extent <- st_read(\"extent.shp\")\n```\n:::\n\n\nYou should see the following output in the console:\n\n```\n> shp.extent <- st_read(\"extent.shp\")\nReading layer `extent' from data source \n  `C:\\Users\\mgimond\\Documents\\es214\\HW15\\extent.shp' using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 625816.3 ymin: 1011809 xmax: 626816.3 ymax: 1012309\nProjected CRS: WGS 84 / UTM zone 17N\n```\n\n> NOTE: if you get the error message `Error: Cannot open \"extent.shp\"; The file doesn't seem to exist.`, then you probably did not properly set the working directory in an earlier step or you have a syntax error in the filename.\n\nR can store spatial objects in different internal formats but `spatstat`'s functions require that specific spatial formats be used. The `extent.shp`  layer will be used to define the study extent which will require that it be stored as a `owin` data type for use with the `spatstat` package. We will make use of the `as.owin` function to convert the `shp.extent` object to an `owin` object. We'll name the output object `w`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw  <- as.owin(shp.extent)\n```\n:::\n\n\nNote that the coordinate unit associated with the spatial object inherits the underlying coordinate system's map units--`meters` in our example. \n\nNext we will load the `bei.shp` using the same function, but instead of storing the shapefile as a polygon boundary, we will convert the point shapefile to a `ppp` point object for use with the `spatstat` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshp.point <- st_read(\"bei.shp\")  \np  <- as.ppp(shp.point)  \n```\n:::\n\n\nNote that you might see the following warning. This is fine.\n\n![](img/image5.jpg){width=\"340\"}\n\nNext, we will need to explicitly define the study extent for the point object. This will prove useful when running the kernel density function later in this exercise. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nWindow(p) <- w\n```\n:::\n\n\nThere is one more thing that we will need to do that will make the data behave with `spatstats` tools: remove the layer's attribute information (point attributes are also known as *marks* in the point pattern analysis world). The point attributes will not be needed here since our interest is in the pattern generated by the points and not by their attribute values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarks(p) <- NULL\n```\n:::\n\n\n# Visualizing Spatial Objects\n\nThere are several tools that can be used to plot the points. The  base `plot` function does a nice job in generating basic plots. To plot the point data we just loaded, simply type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(p, main = NULL)\n```\n\n::: {.cell-output-display}\n![](Point_pattern_in_R_files/figure-html/unnamed-chunk-8-1.png){width=288}\n:::\n:::\n\n\nYou can customize some aspects of the plot such as point type (`pch` parameter), size (`cex` parameter) and color (`cols` parameter).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(p, main = NULL, pch = 16, cex = 0.6, cols = \"brown\")\n```\n\n::: {.cell-output-display}\n![](Point_pattern_in_R_files/figure-html/unnamed-chunk-9-1.png){width=288}\n:::\n:::\n\n\n# Localized (Kernel) Density\n\nNext, we'll create a kernel density raster where the output cell value with take on the point density for a search radius defined by a 20 meter radius (`sigma = 20`). We will use the default *Gaussian* kernel which assigns greater weights to points closest to the raster cell whose density value is being computed. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nk.gaus <- density(p, sigma = 20, window = \"gaussian\")\n```\n:::\n\n\nNow, lets plot the density layer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(k.gaus, main = NULL)\n```\n\n::: {.cell-output-display}\n![](Point_pattern_in_R_files/figure-html/unnamed-chunk-11-1.png){width=288}\n:::\n:::\n\n\nThe `main = NULL` option suppresses the printing of the title above the map.\n\nYou'll notice that \"extent\" defaults to that of the point layer's boundary extent (recall that when we loaded the point shapefile, we explicitly set the point layers' extent to that of the `extent.shp` layer using the code `Window(p) <- w`). This saves us from having to clip out the raster using the extent boundary.\n\nBy default, the `spatstat` package creates `128 x 128` rasters. You can modify the raster resolution using the `spatstat.options()` function. But unlike ArcGIS, you can't specify the pixel size, instead, you must specify the number of rows and columns. Given that we have an extent roughly equal to 1000 (wide) by 500 (tall), we can set the resolution to `500x250` if we want pixel sizes around 10 meters in size.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspatstat.options(npixel=c(500, 250))\nk.gaus <- density(p, sigma = 20, window = \"gaussian\")\nplot(k.gaus, main = NULL)\n```\n\n::: {.cell-output-display}\n![](Point_pattern_in_R_files/figure-html/unnamed-chunk-12-1.png){width=288}\n:::\n:::\n\n\nCustomizing raster colors with the base plot function is a bit more involved. We'll modify the current color scheme using a built-in color gradient that ranges from light yellow to dark red (`heat.colors`),\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(k.gaus, col = heat.colors(n = 50, rev = TRUE), main = NULL)\n```\n\n::: {.cell-output-display}\n![](Point_pattern_in_R_files/figure-html/unnamed-chunk-13-1.png){width=288}\n:::\n:::\n\n\nThe `n = 100` parameter gives the function the number of unique colors  to generate. Given that we want a continuous palette, any value larger than 50 should be fine (recall that we cannot discern large ranges of unique colors).\n\n### Other kernel choices\n\nIf you want to replicate ArcGIS's **Kernel density** geoprocess you need to set the kernel to `quartic` (i.e. `kernel = \"quartic\"`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk.quartic <- density(p, sigma = 20 , kernel = \"quartic\")\nplot(k.quartic, col = heat.colors(n = 50, rev = TRUE), main = NULL)\n```\n\n::: {.cell-output-display}\n![](Point_pattern_in_R_files/figure-html/unnamed-chunk-14-1.png){width=288}\n:::\n:::\n\n\nTo replicate ArcGIS's **Point density** function set the window to `rectangular`. Note that we do not use the `kernel = ` parameter for the `rectangular` option. Instead, we use the `window = ` parameter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk.rect <- density(p, sigma = 20, window = \"rectangular\")\nplot(k.rect, col = heat.colors(n = 50, rev = TRUE), main = NULL)\n```\n\n::: {.cell-output-display}\n![](Point_pattern_in_R_files/figure-html/unnamed-chunk-15-1.png){width=288}\n:::\n:::\n\n\n\n# Distance Based\n\n## Nearest Neighbor Distance (first neighbor)\n\nWe can compute the average nearest neighbor distance for all points using the `nndist` function. This function will compute the distances between all closest point pairs. The `mean` function computes the average value from all those distance values. Note that the units are in map units (meters in our example).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean( nndist(p, k=1) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.330969\n```\n:::\n:::\n\n\n## Multi-order Neighbor Distance (optional exercise)\n\nTo make things more interesting, we can compute the average distance to *all* order neighbors, then plot the relationship as follows. Note that this command may take a while to execute (30 to 60 seconds).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nANN <- apply(nndist(p, k=1:npoints(p)),2 , FUN=mean)\n```\n:::\n\n\nWe can plot the output using one of the following syntax:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(1:npoints(p), ANN, type=\"b\", xlab=\"Neighbor order\" )\n```\n:::\n\n\nOr, you can type\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(ANN ~ eval(1:npoints(p)), type=\"b\", xlab=\"Neighbor order\" )\n```\n\n::: {.cell-output-display}\n![](Point_pattern_in_R_files/figure-html/unnamed-chunk-19-1.png){width=576}\n:::\n:::\n\n\n<hr style=\"height: 3px; background-color: #a7a7a7; border: none;\">\n<table style=\"width:100%\">\n<tr>\n<td align=\"left\">\n<a href=\"../README.html\" style=\"font-size:1.5em;\">Back to ES214 R scripts\n</td> \n<td align=\"right\">\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc/4.0/88x31.png\" /></a>\n</td>\n<td align=\"right\" style=\"width:150px\">_Manny Gimond, 2022_</td></tr>\n</table>\n",
    "supporting": [
      "Point_pattern_in_R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}